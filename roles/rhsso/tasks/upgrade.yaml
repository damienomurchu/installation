---
- name: Setup RH-SSO Imagestreams
  include_tasks: imagestreams.yaml
  vars:
    sso_namespace: "{{ rhsso_namespace }}"

- name: patch new keycloak operator version
  shell: "oc patch deployment keycloak-operator -n {{ eval_rhsso_namespace }} --type json -p '[{\"op\": \"replace\", \"path\": \"/spec/template/spec/containers/0/image\", \"value\": \"{{ rhsso_operator_image }}\"}]'"
  register: patch
  failed_when: patch.stderr != ''

- name: Wait for the new keycloak operator to be ready
  shell: "oc rollout status deployment/keycloak-operator -n {{ eval_rhsso_namespace }}"
  register: rollout_cmd
  failed_when: rollout_cmd.rc != 0
  changed_when: rollout_cmd.rc == 0

- name: Delete existing prometheus rule
  shell: "oc delete prometheusrule application-monitoring -n {{ eval_rhsso_namespace }}"
  register: delete_cmd
  failed_when: delete_cmd.stderr != '' and 'NotFound' not in delete_cmd.stderr
  changed_when: delete_cmd.rc == 0

- name: "patch the monitoringResourcesCreated boolean to false in the rhsso CR"
  shell: "oc patch keycloak rhsso -n {{ eval_rhsso_namespace }} --type json -p '[{\"op\": \"replace\", \"path\": \"/status/monitoringResourcesCreated\", \"value\": false}]'"
  register: cr_patch_keycloak_version
  failed_when: cr_patch_keycloak_version.stderr != ''

- name: "Check whether CS SRE admin user exists"
  shell: "oc get keycloakrealm openshift -n {{ eval_rhsso_namespace }} -o json | jq .spec.users | jq -c '.[] | select(.username | contains(\"{{ rhsso_cssre_admin_username }}\"))'"
  register: cs_sre_admin_user
  failed_when: cs_sre_admin_user.stderr != ""

- name: "Check whether cssre-admin-user-credentials secret exists"
  shell: "oc get secret {{ rhsso_cssre_admin_username }}-user-credentials -n {{ eval_rhsso_namespace }}"
  register: get_sre_admin_secret
  ignore_errors: True

- name: "Create secret for CS SRE Admin user if it does not exist"
  shell: >
    oc create secret generic {{ rhsso_cssre_admin_username }}-user-credentials -n {{ eval_rhsso_namespace }} \
      --from-literal=username={{ rhsso_cssre_admin_username }} \
      --from-literal=password={{ rhsso_cssre_admin_password }} \
      --dry-run -o yaml | oc apply -f -
  when: get_sre_admin_secret is failed

- pause:
    prompt: |
      oc patch keycloak rhsso \
      -n {{ eval_rhsso_namespace }} 
      -p "$(cat '{{ role_path }}/files/upgrade-cssre-admin.yaml')"
    echo: no

- name: "Patch rhsso CR to add CS SRE Admin user if it doesn't exist"
  shell: oc patch keycloakrealm openshift -n {{ eval_rhsso_namespace }} -p "$(cat '{{ role_path }}/files/upgrade-cssre-admin.yaml')"
  when: cs_sre_admin_user.stdout == ""
  register: result
  failed_when: not result.stdout
